<?xml version="1.0" encoding="UTF-8"?>
<RefData version="1.0" exporter="Geodata Tools">
   <DataSet name="Automation Scripts"
            table="t_script"
            filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'"
            stoplist=";ScriptID;">
      <DataRow>
         <Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
         <Column name="ScriptName" value="{AFACCECA-AC91-41a6-8B23-ABE55074DB96}"/>
         <Column name="Notes"
                 value="&lt;Group Type=&#34;CONTEXTPACKAGE&#34; Notes=&#34;Scripts that assist in creating a logical data model in UML. Scripts that prepare the derivation of physical data schemas are not included here.&#34;/&gt;&#xA;"/>
         <Column name="Script" value="eamt-data-model-creation"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
         <Column name="ScriptName" value="{BFB6AF55-0C36-4476-91A3-D8C13D7BAE82}"/>
         <Column name="Notes" value="&lt;Group Type=&#34;NORMAL&#34; Notes=&#34;Utility functions.&#34;/&gt;&#xA;"/>
         <Column name="Script" value="eamt-utilities"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
         <Column name="ScriptName" value="{FAD5FD80-AFAF-4797-8BFB-44A019438349}"/>
         <Column name="Notes"
                 value="&lt;Group Type=&#34;CONTEXTPACKAGE&#34; Notes=&#34;Scripts specific for creating concept models modelled using the FDA profile, see also https://arkitektur.digst.dk/metoder/regler-begrebs-og-datamodellering and https://github.com/digst/model-rules-tool-support.&#34;/&gt;&#xA;"/>
         <Column name="Script" value="eamt-fda-concept-model-creation"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
         <Column name="ScriptName" value="{9B88FBBA-2AEE-4828-95E3-4066B9FF9E29}"/>
         <Column name="Notes"
                 value="&lt;Group Type=&#34;NORMAL&#34; Notes=&#34;Scripts used for keeping scripts developed in EA under version control.&#34;/&gt;&#xA;"/>
         <Column name="Script" value="eamt-script-management"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
         <Column name="ScriptName" value="{2D4D14C7-61B2-4792-8F5F-00705AFB7436}"/>
         <Column name="Notes"
                 value="&lt;Group Type=&#34;NORMAL&#34; Notes=&#34;Tools for persons that contribute to the development of the EAMT scripts.&#34;/&gt;&#xA;"/>
         <Column name="Script" value="eamt-developer-tools"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
         <Column name="ScriptName" value="{6FA0E69C-7CFE-4201-965D-EACB6B9F1F6F}"/>
         <Column name="Notes"
                 value="&lt;Group Type=&#34;CONTEXTPACKAGE&#34; Notes=&#34;Scripts that assist in preparing the derivation of physical data schemas, e.g. using [ShapeChange](https://shapechange.net/).&#34;/&gt;&#xA;"/>
         <Column name="Script" value="eamt-data-schema-preparation"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
         <Column name="ScriptName" value="{FC483AD9-C76F-46b2-9883-E7D1D8C4B8EB}"/>
         <Column name="Notes"
                 value="&lt;Group Type=&#34;CONTEXTPACKAGE&#34; Notes=&#34;Scripts that assist in exporting a logical data model.&#34;/&gt;&#xA;"/>
         <Column name="Script" value="eamt-data-model-export"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
         <Column name="ScriptName" value="{BF522BAE-AD19-4abb-8EA7-B7A030C7F6EA}"/>
         <Column name="Notes" value="&lt;Group Type=&#34;NORMAL&#34; Notes=&#34;&#34;/&gt;&#xA;"/>
         <Column name="Script" value="eamt-fda-concept-model-export"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{CB885391-7623-4417-B78A-A735D90DD3DE}"/>
         <Column name="ScriptAuthor" value="{BFB6AF55-0C36-4476-91A3-D8C13D7BAE82}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;_messages&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="var MESSAGE_PACKAGE_REQUIRED = &#34;This script requires a package to be selected in the Project Browser.\n&#34; +&#xA;&#x9;&#x9;&#x9;&#34;Please select a package in the Project Browser and try again.&#34;;"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{06C9A7C9-C3B9-4146-8EC8-A1618C64B7ED}"/>
         <Column name="ScriptAuthor" value="{BFB6AF55-0C36-4476-91A3-D8C13D7BAE82}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;_shell-application-utils&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="/**&#xA; * @file This file contains utility functions to access to aspects of the Windows Explorer Shell application,&#xA; *       such as managing windows, files and folders, and the current session. This is useful in scripts that call&#xA; *       command line scripts importing or exporting models.&#xA; */&#xA; !INC eamt-utilities._logging-utils&#xA;&#xA;/** &#xA; * Provides access to aspects of the Windows Explorer Shell application, such as managing windows, files and&#xA; * folders, and the current session (from &#34;Windows Powershell Pocket References&#34; by Lee Holmes).&#xA; *&#xA; * See more on [Scriptable Shell Objects](https://docs.microsoft.com/en-us/windows/win32/shell/scriptable-shell-objects-roadmap)&#xA; * (in the Shell Developer's Guide) and&#xA; * [Shell object](https://docs.microsoft.com/en-us/windows/win32/shell/shell) (in the Shell Reference).&#xA; */&#xA;var SHELL_APP = new COMObject(&#34;Shell.Application&#34;);&#xA;&#xA;/**&#xA; * Shows a dialog box (not in the foreground unfortunately...) to the user to choose a folder.&#xA; * Returns the absolute file path of the choosen folder, or an empty string if no folder was selected.&#xA; */&#xA;function chooseFolderWithUI(dialogBoxTitle /* : String */) {&#xA;&#x9;LOGInfo(&#34;Pick a folder with the UI (see new dialog)&#34;);&#xA;&#x9;&#xA;&#x9;/* &#xA;&#x9; * BrowserForFolder method: see https://docs.microsoft.com/en-us/windows/win32/shell/shell-browseforfolder&#xA;&#x9; *&#xA;&#x9; * 4th argument of BrowseForFolder method:&#xA;&#x9; * see https://docs.microsoft.com/en-us/windows/win32/api/shldisp/ne-shldisp-shellspecialfolderconstants:&#xA;&#x9; * 0x11 (17). My Computerâ€”the virtual folder that contains everything on the local computer: storage devices, printers, and Control Panel. &#xA;&#x9; * This folder can also contain mapped network drives.&#xA;&#x9; */&#xA;&#x9;var folder = SHELL_APP.BrowseForFolder(0, dialogBoxTitle, 0x00000040, 0x11);&#xA;&#x9;if (folder == null) {&#xA;&#x9;&#x9;return &#34;&#34;;&#xA;&#x9;} else {&#xA;&#x9;&#x9;return folder.Self.Path;&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * Opens the folder with the given path in Windows Explorer.&#xA; */&#xA;function openFolderInWindowsExplorer(folderPath) {&#xA;&#x9;SHELL_APP.Explore(folderPath);&#xA;}"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{758532AB-EBA1-4ea6-B9C3-746814C64568}"/>
         <Column name="ScriptAuthor" value="{BFB6AF55-0C36-4476-91A3-D8C13D7BAE82}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;_constants&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="/**&#xA; * @file This file contains constants used by EA or Windows. Taken from EAConstants-JScript in Local Scripts.&#xA; */&#xA;&#xA;/*&#xA; * Prompt types for Session.Prompt().&#xA; */&#xA;var promptOK&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var promptYESNO&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var promptYESNOCANCEL&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var promptOKCANCEL&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;&#xA;/*&#xA; * Prompt results from Session.Prompt().&#xA; */&#xA;var resultOK&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var resultCancel&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var resultYes&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var resultNo&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 4;"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{1EE8D5D6-6519-4984-B91B-08A12CC7BD98}"/>
         <Column name="ScriptAuthor" value="{BFB6AF55-0C36-4476-91A3-D8C13D7BAE82}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;_tagged-values-utils&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="/**&#xA; * @file This file contains utility functions to assist with the getting and setting of tagged values.&#xA; *       See also https://www.sparxsystems.com/search/sphider/search.php?query=automation+memo+tagged+value&amp;type=and&amp;category=User+Guide+Latest&amp;tab=5&amp;search=1.&#xA; *&#xA; */&#xA;var MAX_LENGTH_TAGGED_VALUE = 255;&#xA;&#xA;/*&#xA; * Do not use Collection.GetByName for searching for tagged values: documentation &#34;If the collection contains items, but it was unable to &#xA; * find an object with the specified name, the method raises an exception&#34; (note: the exception is Index out of bounds).&#xA; */&#xA;&#xA;/**&#xA; * @param theElement {EA.Element}&#xA; * @param taggedValueName {string}&#xA; * @param defaultValue {string}&#xA; * @return {string}&#xA; */&#xA;function getTaggedValueElement(theElement, taggedValueName, defaultValue) {&#xA;&#x9;var result = defaultValue;&#xA;&#xA;&#x9;if (theElement != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValue as EA.TaggedValue;&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#x9;&#x9;taggedValues = theElement.TaggedValues;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Name == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue = taggedValues.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (taggedValue != null) {&#xA;&#x9;&#x9;&#x9;if (taggedValue.Value == &#34;&lt;memo&gt;&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;result = taggedValue.Notes;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;result = taggedValue.Value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return result;&#xA;}&#xA;&#xA;/**&#xA; * @param theElement {EA.Element}&#xA; * @param taggedValueName {string}&#xA; * @param taggedValueValue {string}&#xA; */&#xA;function setTaggedValueElement(theElement, taggedValueName, taggedValueValue) {&#xA;&#x9;if (theElement != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValue as EA.TaggedValue;&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#x9;&#x9;taggedValues = theElement.TaggedValues;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Name == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue = taggedValues.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (taggedValue == null) {&#xA;&#x9;&#x9;&#x9;taggedValue = theElement.TaggedValues.AddNew(taggedValueName, truncateTaggedValueValueIfNeeded(taggedValueValue));&#xA;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if (taggedValue.Value == &#34;&lt;memo&gt;&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Notes = taggedValueValue;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Value = truncateTaggedValueValueIfNeeded(taggedValueValue);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taggedValue.Update();&#xA;&#x9;&#x9;theElement.TaggedValues.Refresh();&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param theElement {EA.Element}&#xA; * @param taggedValueName {string}&#xA; */&#xA;function changeTaggedValueElementFromShortToLong(theElement, taggedValueName) {&#xA;&#x9;if (theElement != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValue as EA.TaggedValue;&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#x9;&#x9;taggedValues = theElement.TaggedValues;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Name == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue = taggedValues.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (taggedValue != null) {&#xA;&#x9;&#x9;&#x9;if (taggedValue.Value == &#34;&lt;memo&gt;&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;// do nothing&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;var taggedValueValue = taggedValue.Value;&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Value = &#34;&lt;memo&gt;&#34;;&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Notes = taggedValueValue;&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Update();&#xA;&#x9;&#x9;&#x9;&#x9;theElement.TaggedValues.Refresh();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param theElement {EA.Element}&#xA; * @param taggedValueName {string}&#xA; */&#xA;function deleteTaggedValueElement(theElement, taggedValueName) {&#xA;&#x9;if (theElement != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValue as EA.TaggedValue;&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#x9;&#x9;taggedValues = theElement.TaggedValues;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Name == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValues.Delete(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;theElement.TaggedValues.Refresh();&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param attribute {EA.Attribute}&#xA; * @param taggedValueName {string}&#xA; * @param defaultValue {string}&#xA; * @return {string}&#xA; */&#xA;function getTaggedValueAttribute(attribute, taggedValueName, defaultValue) {&#xA;&#x9;var result = defaultValue;&#xA;&#xA;&#x9;if (attribute != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValue as EA.AttributeTag;&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#x9;&#x9;taggedValues = attribute.TaggedValues;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Name == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue = taggedValues.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (taggedValue != null) {&#xA;&#x9;&#x9;&#x9;if (taggedValue.Value == &#34;&lt;memo&gt;&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;result = taggedValue.Notes;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;result = taggedValue.Value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return result;&#xA;}&#xA;&#xA;/**&#xA; * @param attribute {EA.Attribute}&#xA; * @param taggedValueName {string}&#xA; * @param taggedValueValue {string}&#xA; */&#xA;function setTaggedValueAttribute(attribute, taggedValueName, taggedValueValue) {&#xA;&#x9;if (attribute != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValue as EA.AttributeTag;&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#x9;&#x9;taggedValues = attribute.TaggedValues;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Name == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue = taggedValues.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (taggedValue == null) {&#xA;&#x9;&#x9;&#x9;taggedValue = attribute.TaggedValues.AddNew(taggedValueName, truncateTaggedValueValueIfNeeded(taggedValueValue));&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if (taggedValue.Value == &#34;&lt;memo&gt;&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Notes = taggedValueValue;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Value = truncateTaggedValueValueIfNeeded(taggedValueValue);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taggedValue.Update();&#xA;&#x9;&#x9;attribute.TaggedValues.Refresh();&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param attribute {EA.Attribute}&#xA; * @param taggedValueName {string}&#xA; */&#xA;function changeTaggedValueAttributeFromShortToLong(attribute, taggedValueName) {&#xA;&#x9;if (attribute != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValue as EA.AttributeTag;&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#x9;&#x9;taggedValues = attribute.TaggedValues;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Name == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue = taggedValues.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (taggedValue != null) {&#xA;&#x9;&#x9;&#x9;if (taggedValue.Value == &#34;&lt;memo&gt;&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;// do nothing&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;var taggedValueValue = taggedValue.Value;&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Value = &#34;&lt;memo&gt;&#34;;&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Notes = taggedValueValue;&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Update();&#xA;&#x9;&#x9;&#x9;&#x9;attribute.TaggedValues.Refresh();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param attribute {EA.Attribute}&#xA; * @param taggedValueName {string}&#xA; */&#xA;function deleteTaggedValueAttribute(attribute, taggedValueName) {&#xA;&#x9;if (attribute != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValue as EA.AttributeTag;&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#x9;&#x9;taggedValues = attribute.TaggedValues;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Name == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValues.Delete(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;attribute.TaggedValues.Refresh();&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param connector {EA.Connector}&#xA; * @param taggedValueName {string}&#xA; * @param source {boolean}&#xA; * @param defaultValue {string}&#xA; * @return {string}&#xA; */&#xA;function getTaggedValueConnectorEnd(connector, taggedValueName, source, defaultValue) {&#xA;&#x9;var result = defaultValue;&#xA;&#x9;if (connector != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#x9;&#x9;var taggedValue as EA.RoleTag;&#xA;&#x9;&#x9;if (source) {&#xA;&#x9;&#x9;&#x9;taggedValues = connector.ClientEnd.TaggedValues;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;taggedValues = connector.SupplierEnd.TaggedValues;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Tag == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue = taggedValues.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (taggedValue != null) {&#xA;&#x9;&#x9;&#x9;if (taggedValue.Value.substr(0, 6) == &#34;&lt;memo&gt;&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;result = taggedValue.Value.substr(16); // the following is removed from the start of the value: &lt;memo&gt;$ea_notes=&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;result = taggedValue.Value.split(&#34;$ea_notes=&#34;)[0];&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return result;&#xA;}&#xA;&#xA;/**&#xA; * @param connectorEnd {EA.ConnectorEnd}&#xA; * @param taggedValueName {string}&#xA; * @param defaultValue {string}&#xA; * @return {string}&#xA; */&#xA;function getTaggedValueConnectorEndByConnectorEnd(connectorEnd, taggedValueName, defaultValue) {&#xA;&#x9;var result = defaultValue;&#xA;&#x9;if (taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#x9;&#x9;var taggedValue as EA.RoleTag;&#xA;&#x9;&#x9;taggedValues = connectorEnd.TaggedValues;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Tag == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue = taggedValues.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (taggedValue != null) {&#xA;&#x9;&#x9;&#x9;if (taggedValue.Value.substr(0, 6) == &#34;&lt;memo&gt;&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;result = taggedValue.Value.substr(16); // the following is removed from the start of the value: &lt;memo&gt;$ea_notes=&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;result = taggedValue.Value.split(&#34;$ea_notes=&#34;)[0];&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return result;&#xA;}&#xA;&#xA;/**&#xA; * @param connector {EA.Connector}&#xA; * @param taggedValueName {string}&#xA; * @param taggedValueValue {string}&#xA; * @param source {boolean}&#xA; */&#xA;function setTaggedValueConnectorEnd(connector, taggedValueName, taggedValueValue, source) {&#xA;&#x9;if (connector != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#x9;&#x9;if (source) {&#xA;&#x9;&#x9;&#x9;taggedValues = connector.ClientEnd.TaggedValues;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;taggedValues = connector.SupplierEnd.TaggedValues;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;var taggedValue as EA.RoleTag;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Tag == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue = taggedValues.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (taggedValue == null) {&#xA;&#x9;&#x9;&#x9;taggedValue = taggedValues.AddNew(taggedValueName, truncateTaggedValueValueIfNeeded(taggedValueValue));&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if (taggedValue.Value.substr(0, 6) == &#34;&lt;memo&gt;&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Value = &#34;&lt;memo&gt;$ea_notes=&#34; + taggedValueValue;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Value = truncateTaggedValueValueIfNeeded(taggedValueValue);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taggedValue.Update();&#xA;&#x9;&#x9;taggedValues.Refresh();&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param connector {EA.Connector}&#xA; * @param taggedValueName {string}&#xA; * @param source {boolean}&#xA; */&#xA;function changeTaggedValueConnectorEndFromShortToLong(connector, taggedValueName, source) {&#xA;&#x9;if (connector != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#x9;&#x9;if (source) {&#xA;&#x9;&#x9;&#x9;taggedValues = connector.ClientEnd.TaggedValues;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;taggedValues = connector.SupplierEnd.TaggedValues;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;var taggedValue as EA.RoleTag;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Tag == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue = taggedValues.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (taggedValue != null) {&#xA;&#x9;&#x9;&#x9;if (taggedValue.Value.substr(0, 6) == &#34;&lt;memo&gt;&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;// do nothing&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;var taggedValueValue = taggedValue.Value;&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Value = &#34;&lt;memo&gt;$ea_notes=&#34; + taggedValueValue;&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Update();&#xA;&#x9;&#x9;&#x9;&#x9;taggedValues.Refresh();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param connector {EA.Connector}&#xA; * @param taggedValueName {string}&#xA; * @param source {boolean}&#xA; */&#xA;function deleteTaggedValueConnectorEnd(connector, taggedValueName, source) {&#xA;&#x9;if (connector != null &amp;&amp; taggedValueName.length &gt; 0) {&#xA;&#x9;&#x9;var taggedValues as EA.Collection;&#xA;&#x9;&#x9;if (source) {&#xA;&#x9;&#x9;&#x9;taggedValues = connector.ClientEnd.TaggedValues;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;taggedValues = connector.SupplierEnd.TaggedValues;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;var taggedValue as EA.RoleTag;&#xA;&#x9;&#x9;taggedValue = null;&#xA;&#xA;&#x9;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;&#x9;if (taggedValues.GetAt(i).Tag == taggedValueName) {&#xA;&#x9;&#x9;&#x9;&#x9;taggedValues.Delete(i);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;taggedValues.Refresh();&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * Truncates the value of a tagged value if it is longer than the maximum.&#xA; *&#xA; * When using a longer value than the maximum, the value cannot be set in the database. EA doesn't show a message&#xA; * but file %appdata%\Sparx Systems\EA\DBError.txt will contain the following:&#xA; * The field is too small to accept the amount of data you attempted to add.  Try inserting or pasting less data.&#xA; *&#xA; * @param taggedValueValue {string}&#xA; * @return {string} truncated value&#xA; */&#xA;function truncateTaggedValueValueIfNeeded(taggedValueValue) {&#xA;&#x9;var newTaggedValueValue;&#xA;&#x9;if (taggedValueValue.length &lt;= MAX_LENGTH_TAGGED_VALUE) {&#xA;&#x9;&#x9;newTaggedValueValue = taggedValueValue;&#xA;&#x9;} else {&#xA;&#x9;&#x9;LOGDebug(&#34;Truncate to &#34; + MAX_LENGTH_TAGGED_VALUE + &#34; characters: &#34; + taggedValueValue.substr(0, 30) + &#34;...&#34;);&#xA;&#x9;&#x9;newTaggedValueValue = taggedValueValue.substr(0, MAX_LENGTH_TAGGED_VALUE);&#xA;&#x9;}&#xA;&#x9;return newTaggedValueValue;&#xA;}"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{7B773725-B9B8-40e5-9D79-FDD5E7F1BDFF}"/>
         <Column name="ScriptAuthor" value="{BFB6AF55-0C36-4476-91A3-D8C13D7BAE82}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;_guid-utils&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="/**&#xA; * @file This file contains utility functions to assist with working with UUIDs (universally unique identifiers).&#xA; */&#xA;&#xA;/**&#xA; * @param guid {string} GUID (Microsoft UUID, enclosed in curly braces {})&#xA; * @return {string} GUID without curly braces&#xA; */&#xA;function convertGuidToStandardRepresentation(guid) {&#xA;&#x9;if (guid.length != 38) {&#xA;&#x9;&#x9;var message = &#34;Length of &#34; + guid + &#34; is not 38, expected a UUID surrounded with curly braces&#34;;&#xA;&#x9;&#x9;throw message;&#xA;&#x9;}&#xA;&#x9;return guid.toLowerCase().substr(1,36);&#xA;}&#xA;&#xA;/**&#xA; * @param connectorGuid {string} GUID of the connector the connector end belongs to&#xA; * @param source {boolean} whether the connector is the source (true) or the target (false) of the connector&#xA; * @return GUID in XML of a connector end&#xA; */&#xA;function determineGuidAsXMLOfConnectorEnd(connectorGuid /* string */, source /* boolean */) {&#xA;&#x9;var connectorGuidAsXML = Repository.GetProjectInterface().GUIDtoXML(connectorGuid);&#xA;&#x9;var connectorGuidAsXML;&#xA;&#x9;if (source) {&#xA;&#x9;&#x9;connectorGuidAsXML = connectorGuidAsXML.substr(0, 5) + &#34;src&#34; + connectorGuidAsXML.substr(7);&#xA;&#x9;} else {&#xA;&#x9;&#x9;connectorGuidAsXML = connectorGuidAsXML.substr(0, 5) + &#34;dst&#34; + connectorGuidAsXML.substr(7);&#xA;&#x9;}&#xA;&#x9;return connectorGuidAsXML;&#xA;&#x9;&#xA;}"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{0CDB9C42-FBBB-43cc-B8EB-A1925B780A68}"/>
         <Column name="ScriptAuthor" value="{BFB6AF55-0C36-4476-91A3-D8C13D7BAE82}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;_model-utils&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="/**&#xA; * @file This file contains utility functions to assist with the retrieving model elements from the EA model.&#xA; */&#xA;&#xA;/**&#xA; * @param aPackage {EA.Package}&#xA; * @return {Array&lt;EA.Element&gt;} elements in the given package (including elements in all its subpackages)&#xA; */&#xA;function getElementsOfPackageAndSubpackages(aPackage) {&#xA;&#x9;var elements = [];&#xA;&#x9;for (var i = 0; i &lt; aPackage.Elements.Count; i++) {&#xA;&#x9;&#x9;elements[i] = aPackage.Elements.GetAt(i);&#xA;&#x9;}&#xA;&#x9;for (var j = 0; j &lt; aPackage.Packages.Count; j++) {&#xA;&#x9;&#x9;// recursive function&#xA;&#x9;&#x9;elements = elements.concat(getElementsOfPackageAndSubpackages(aPackage.Packages.GetAt(j)));&#xA;&#x9;}&#xA;&#x9;return elements;&#xA;}&#xA;&#xA;/**&#xA; * @param aPackage {EA.Package}&#xA; * @return {Array&lt;EA.Diagram&gt;} diagrams in the given package (including diagrams in all its subpackages)&#xA; */&#xA;function getDiagramsOfPackageAndSubpackages(aPackage) {&#xA;&#x9;var diagrams = [];&#xA;&#x9;for (var i = 0; i &lt; aPackage.Diagrams.Count; i++) {&#xA;&#x9;&#x9;diagrams[i] = aPackage.Diagrams.GetAt(i);&#xA;&#x9;}&#xA;&#x9;for (var j = 0; j &lt; aPackage.Packages.Count; j++) {&#xA;&#x9;&#x9;// recursive function&#xA;&#x9;&#x9;diagrams = diagrams.concat(getDiagramsOfPackageAndSubpackages(aPackage.Packages.GetAt(j)));&#xA;&#x9;}&#xA;&#x9;return diagrams;&#xA;}&#xA;&#xA;/**&#xA; * @param aPackage {EA.Package}&#xA; * @return {Array&lt;EA.Package&gt;} packages in the given package (including packages in all its subpackages)&#xA; */&#xA;function getSubpackagesOfPackage(aPackage) {&#xA;&#x9;var packages = [];&#xA;&#x9;for (var i = 0; i &lt; aPackage.Packages.Count; i++) {&#xA;&#x9;&#x9;// recursive function&#xA;&#x9;&#x9;packages = packages.concat(aPackage.Packages.GetAt(i), getSubpackagesOfPackage(aPackage.Packages.GetAt(i)));&#xA;&#x9;}&#xA;&#x9;return packages;&#xA;}&#xA;&#xA;/**&#xA; * @return Array&lt;EA.Connector&gt; associations (including the aggregations and compositions) that are version&#xA; *         controlled in the given package or one of its subpackages.&#xA; */&#xA;function getAssociationsOfPackageAndSubpackages(aPackage) {&#xA;&#x9;var element as EA.Element;&#xA;&#x9;var connector as EA.Connector;&#xA;&#x9;var addToMap;&#xA;&#x9;&#xA;&#x9;var elements = getElementsOfPackageAndSubpackages(aPackage);&#xA;&#x9;var connectorMap = new Map();&#xA;&#x9;&#xA;&#x9;for (var i = 0; i &lt; elements.length; i++) {&#xA;&#x9;&#x9;element = elements[i];&#xA;&#x9;&#x9;for (var j = 0; j &lt; element.Connectors.Count; j++) {&#xA;&#x9;&#x9;&#x9;connector = element.Connectors.GetAt(j);&#xA;&#x9;&#x9;&#x9;addToMap = isConnectorAssociationAndControlledInSamePackageAsElement(connector, element);&#xA;&#x9;&#x9;&#x9;if (addToMap) {&#xA;&#x9;&#x9;&#x9;&#x9;if (!connectorMap.has(connector.ConnectorGUID)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;connectorMap.set(connector.ConnectorGUID, connector);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return connectorMap.values();&#xA;}&#xA;&#xA;/**&#xA; * If a connector is controlled in the same package as a certain element, this means that both the element and the&#xA; * connector can be changed when the package the element belongs to is checked out. See also&#xA; * [Add Connectors To Locked Elements](https://www.sparxsystems.com/search/sphider/search.php?query=%22Add%20Connectors%20To%20Locked%20Elements%22&amp;type=phrase&amp;category=User+Guide+Latest&amp;tab=5&amp;search=1)&#xA; * &#xA; * @return {boolean} whether the given connector is an association (including aggregations and compositions) controlled in the same package&#xA; *         as in the given element&#xA; */&#xA;function isConnectorAssociationAndControlledInSamePackageAsElement(aConnector /* : EA.Connector */, anElement /* : EA.Element */) /* : boolean */ {&#xA;&#x9;var result;&#xA;&#x9;result =&#xA;&#x9;(Repository.GetElementByID(aConnector.ClientID).PackageID == Repository.GetElementByID(aConnector.SupplierID).PackageID &#xA;&#x9;&#x9;&amp;&amp; (aConnector.Type == &#34;Association&#34; || aConnector.Type == &#34;Aggregation&#34;))&#xA;&#x9;||&#xA;&#x9;((aConnector.ClientID == anElement.ElementID &amp;&amp; (aConnector.Type == &#34;Association&#34;))&#xA;&#x9;||&#xA;&#x9;(aConnector.SupplierID == anElement.ElementID &amp;&amp; aConnector.Type == &#34;Aggregation&#34;));&#xA;&#x9;return result;&#xA;}&#xA;&#xA;/**&#xA; * @param {EA.Element}&#xA; * @return {string} full path name of the given element (OCL style, see section 7.5.7 of the specification).&#xA; */&#xA;function getPathnameOfElement(anElement) {&#xA;&#x9;var package as EA.Package;&#xA;&#x9;package = Repository.GetPackageByID(anElement.PackageID);&#xA;&#x9;var pathname = package.Name + &#34;::&#34; + anElement.Name;&#xA;&#x9;do {&#xA;&#x9;&#x9;package = Repository.GetPackageByID(package.ParentID);&#xA;&#x9;&#x9;pathname = package.Name + &#34;::&#34; + pathname;&#xA;&#x9;} while (package.ParentID != 0)&#xA;&#x9;return pathname;&#xA;}&#xA;&#xA;/**&#xA; * @return {Array&lt;EA.Element&gt;} parent elements of the given element; the immediate parent is the first element in the array&#xA; */&#xA;function getParents(element) {&#xA;&#x9;// See Local Scripts.EAConstants-JScript for variable rsParents&#xA;&#x9;// Behaviour of GetRelationSet seems to be that the immediate parent is the first element in the array.&#xA;&#x9;elementIdsCommaSeparated = element.GetRelationSet(rsParents);&#xA;&#x9;var elements;&#xA;&#x9;if (elementIdsCommaSeparated.length == 0) {&#xA;&#x9;&#x9;elements = new Array();&#xA;&#x9;} else {&#xA;&#x9;&#x9;var elementIdsArray = elementIdsCommaSeparated.split(&#34;,&#34;);&#xA;&#x9;&#x9;elements = new Array(elementIdsArray.length);&#xA;&#x9;&#x9;for (var i in elementIdsArray) {&#xA;&#x9;&#x9;&#x9;elements[i] = Repository.GetElementByID(elementIdsArray[i]);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return elements;&#xA;}&#xA;&#xA;/**&#xA; * @return {Map&lt;int,EA.ConnectorEnd&gt;} map of the properties of the given element that are not inherited and that are association ends (not attributes)&#xA; *         The key is the connector ID, the value is the connector end.&#xA; */&#xA;function getNonInHeritedPropertiesThatAreAssociationEnds(element) {&#xA;&#x9;var properties = new Map();&#xA;&#x9;for (var i = 0; i &lt; element.Connectors.Count; i++) {&#xA;&#x9;&#x9;connector = element.Connectors.GetAt(i);&#xA;&#x9;&#x9;if (connector.Type == &#34;Association&#34; || connector.Type == &#34;Aggregation&#34;) {&#xA;&#x9;&#x9;&#x9;var property as EA.ConnectorEnd;&#xA;&#x9;&#x9;&#x9;var isOutgoing = false;&#xA;&#x9;&#x9;&#x9;if (element.ElementID == connector.ClientID &amp;&amp; connector.SupplierEnd.IsNavigable) {&#xA;&#x9;&#x9;&#x9;&#x9;isOutgoing = true;&#xA;&#x9;&#x9;&#x9;&#x9;property = connector.SupplierEnd;&#xA;&#x9;&#x9;&#x9;} else if (element.ElementID == connector.SupplierID &amp;&amp; connector.ClientEnd.IsNavigable) {&#xA;&#x9;&#x9;&#x9;&#x9;isOutgoing = true;&#xA;&#x9;&#x9;&#x9;&#x9;property = connector.ClientEnd;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (isOutgoing) {&#xA;&#x9;&#x9;&#x9;&#x9;properties.set(connector.ConnectorID, property);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return properties;&#xA;}"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{81B4C325-AFBA-4885-8A0B-1C6FEE159E72}"/>
         <Column name="ScriptAuthor" value="{BFB6AF55-0C36-4476-91A3-D8C13D7BAE82}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;_command-line-utils&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="/**&#xA; * @file This file contains functions to provide the &#34;glue&#34; between a script in EA and a .bat file calling e.g. Java code.&#xA; */&#xA; !INC eamt-utilities._logging-utils&#xA;&#xA;var ENV_VARIABLE_LOCATION_TOOLS = &#34;EAMT_HOME&#34;;&#xA;&#xA;/**&#xA; * Provides access to aspects of the Windows Shell, such as applications, shortscuts, environment variables,&#xA; * the registry, and operating environment (from &#34;Windows Powershell Pocket References&#34; by Lee Holmes).&#xA; *&#xA; * See more on [WshShell Object](https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/windows-scripting/aew9yb99(v=vs.84))&#xA; */&#xA;var WSH_SHELL = new COMObject(&#34;WScript.Shell&#34;);&#xA;&#xA;/*&#xA; * Possible values for the type of popup (WSH_SHELL.Popup). Values can be added up to combine them.&#xA; * See https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/windows-scripting/x83z1d9f(v=vs.84).&#xA; */&#xA;var PT_OK = 0;&#xA;var PT_OKCANCEL = 1;&#xA;var PT_ABORTRETRYIGNORE = 2;&#xA;var PT_YESNOCANCEL = 3;&#xA;var PT_YESNO = 4;&#xA;var PT_RETRYCANCEL = 5;&#xA;var PT_CANCELTRYCONTINUE = 6;&#xA;var PT_ICONSTOP = 16;&#xA;var PT_ICONQUESTION = 32;&#xA;var PT_ICONEXCLAMATION = 48;&#xA;var PT_ICONINFORMATION = 64;&#xA;var PT_DEFBUTTON2 = 256;&#xA;var PT_DEFBUTTON3 = 512;&#xA;&#xA;/*&#xA; * Possible return values of WSH_SHELL.Popup method.&#xA; * See https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/windows-scripting/x83z1d9f(v=vs.84).&#xA; */&#xA;var BTN_NONECLICKED = -1;&#xA;var BTN_OK = 1;&#xA;var BTN_CANCEL = 2;&#xA;var BTN_ABORT = 3;&#xA;var BTN_RETRY = 4;&#xA;var BTN_IGNORE = 5;&#xA;var BTN_YES = 6;&#xA;var BTN_NO = 7;&#xA;var BTN_TRYAGAIN = 10;&#xA;var BTN_CONTINUE = 11;&#xA;&#xA;/**&#xA; * @param {string} batFileToInvoke the .bat file to be invoked&#xA; * @param {string} arguments to give to the .bat file&#xA; */&#xA;function runBatFileInDefaultWorkingDirectory(batFileToInvoke, programArguments) {&#xA;&#x9;runBatFileInSpecifiedWorkingDirectory(WSH_SHELL.ExpandEnvironmentStrings(&#34;%&#34; + ENV_VARIABLE_LOCATION_TOOLS + &#34;%&#34;), batFileToInvoke, programArguments);&#xA;}&#xA;&#xA;/**&#xA; * @param {string} workingDirectory working directory&#xA; * @param {string} batFileToInvoke the .bat file to be invoked&#xA; * @param {string} arguments to give to the .bat file&#xA; */&#xA;function runBatFileInSpecifiedWorkingDirectory(workingDirectory, batFileToInvoke, programArguments) {&#xA;&#x9;var processId = determineProcessId(workingDirectory);&#xA;&#x9;if (processId != &#34;-1&#34;) {&#xA;&#x9;&#x9;runBatFileInSpecifiedWorkingDirectoryWithProcessId(workingDirectory, batFileToInvoke, processId, programArguments);&#xA;&#x9;} else {&#xA;&#x9;&#x9;LOGError(&#34;Cannot proceed, stopping here.&#34;);&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param {string} workingDirectory working directory&#xA; * @param {string} batFileToInvoke the .bat file to be invoked&#xA; * @param {string} processId the process id of the running EA instance&#xA; * @param {string} arguments to give to the .bat file&#xA; * @private&#xA; */&#xA;function runBatFileInSpecifiedWorkingDirectoryWithProcessId(workingDirectory, batFileToInvoke, processId, programArguments) {&#xA;&#x9;var environmentString = &#34;%&#34; + ENV_VARIABLE_LOCATION_TOOLS + &#34;%&#34;;&#xA;&#x9;var locationDMT = WSH_SHELL.ExpandEnvironmentStrings(environmentString);&#xA;&#x9;if (environmentString == locationDMT) {&#xA;&#x9;&#x9;LOGError(&#34;Environment variable &#34; + ENV_VARIABLE_LOCATION_TOOLS + &#34; not set, set this environment variable and restart Enterprise Architect&#34;);&#xA;&#x9;&#x9;return;&#xA;&#x9;} else {&#xA;&#x9;&#x9;var command = '&#34;' + locationDMT + '\\bin\\' + batFileToInvoke + '&#34;' + &#34; -eapid &#34; + processId + &#34; &#34; + programArguments;&#xA;&#x9;&#x9;LOGInfo(&#34;command: &#34; + command);&#xA;&#x9;&#x9;runCommand(workingDirectory, command);&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * Determines the process id of the running EA instance based on the Windows tasklist command.&#xA; *&#xA; * @return {string} process id of the running EA instance&#xA; */&#xA;function determineProcessId() {&#xA;&#x9;var processId;&#xA;&#x9;var command = 'TASKLIST /V /FO CSV /NH /FI &#34;IMAGENAME eq EA.exe&#34; /FI &#34;WINDOWTITLE eq ' + getWindowTitleForInstanceOfEA() + '&#34;';&#xA;&#x9;LOGInfo(command);&#xA;&#x9;var wse = WSH_SHELL.Exec(command); // returns WshScriptExec Object, see https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/windows-scripting/2f38xsxe%28v%3dvs.84%29&#xA;&#x9;while (wse.Status == 0) {&#xA;&#x9;&#x9;LOGInfo(&#34;Retrieving process id&#34;);&#xA;&#x9;&#x9;// alternative way of &#34;sleeping&#34;&#xA;&#x9;&#x9;// see also https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/windows-scripting/x83z1d9f%28v%3dvs.84%29&#xA;&#x9;&#x9;// see also http://www.sparxsystems.com/forums/smf/index.php/topic,6063.msg127934.html&#xA;&#x9;&#x9;WSH_SHELL.Popup(&#34;Retrieving process id&#34;, 1, &#34;Info message&#34;, PT_OK + PT_ICONINFORMATION);&#xA;&#x9;}&#xA;&#x9;if (!wse.StdOut.AtEndOfStream) {&#xA;&#x9;&#x9;var output = wse.StdOut.ReadAll();&#xA;&#x9;&#x9;LOGInfo(output);&#xA;&#x9;&#x9;if (output.indexOf(&#34;No tasks are running which match the specified criteria&#34;) != -1) {&#xA;&#x9;&#x9;&#x9;LOGError(&#34;Is the command correct? Check the script.&#34;);&#xA;&#x9;&#x9;&#x9;processId = &#34;-1&#34;;&#xA;&#x9;&#x9;} else if (output.search(/\n&#34;EA.exe&#34;/g) != -1) {&#xA;&#x9;&#x9;&#x9;LOGError(&#34;More than one task found. Is the command correct? Check the script.&#34;);&#xA;&#x9;&#x9;&#x9;processId = &#34;-1&#34;;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;// process id is the second value: &#34;EA.exe&#34;,&#34;4852&#34;,...&#xA;&#x9;&#x9;&#x9;outputAsArray = output.split(&#34;,&#34;);&#xA;&#x9;&#x9;&#x9;processIdWithQuotes = outputAsArray[1];&#xA;&#x9;&#x9;&#x9;processId = processIdWithQuotes.substring(1, processIdWithQuotes.lastIndexOf('&#34;'));&#xA;&#x9;&#x9;&#x9;LOGInfo(&#34;process id=&#34; + processId);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if (!wse.StdErr.AtEndOfStream) {&#xA;&#x9;&#x9;LOGError(wse.StdErr.ReadAll());&#xA;&#x9;&#x9;processId = -1;&#xA;&#x9;}&#xA;&#x9;return processId;&#xA;}&#xA;&#xA;/**&#xA; * Use for calling Java, that writes the output back to the Script window.&#xA; * &#xA; * @param directory {string}&#xA; * @param command {string}&#xA; */&#xA;function runCommand(directory, command) {&#xA;&#x9;var commandFinishedSuccessfully;&#xA;&#x9;&#xA;&#x9;WSH_SHELL.CurrentDirectory = directory;&#xA;&#x9;LOGInfo(&#34;Current directory: &#34;+ WSH_SHELL.CurrentDirectory);&#xA;&#xA;&#x9;/*&#xA;&#x9; * The Run command returns an integer.&#xA;&#x9; * The 3rd argument is true: wait for the program to finish executing before continuing to the next statement in your script.&#xA;&#x9; * See https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/windows-scripting/d5fk67ky(v=vs.84)&#xA;&#x9; */&#xA;&#x9;var result = WSH_SHELL.Run(command, 1, true);&#xA;&#x9;if (result == 0) {&#xA;&#x9;&#x9;commandFinishedSuccessfully = true;&#xA;&#x9;} else {&#xA;&#x9;&#x9;commandFinishedSuccessfully = false;&#xA;&#x9;}&#xA;&#x9;return commandFinishedSuccessfully;&#xA;}&#xA;&#xA;/**&#xA; * Executes a command in the given directory (currently not used, kept for reference, comes from the earlier _ShellHelperFunctions)&#xA; *&#xA; * @param directory {string}&#xA; * @param command {string}&#xA; * @return {boolean} whether or not the command finished successfully&#xA; */&#xA;function executeCommand(directory, command) {&#xA;&#x9;var commandFinishedSuccessfully = true;&#xA;&#x9;&#xA;&#x9;WSH_SHELL.CurrentDirectory = directory;&#xA;&#x9;LOGInfo(&#34;Current directory: &#34;+ WSH_SHELL.CurrentDirectory);&#xA;&#xA;&#x9;var wse = WSH_SHELL.Exec(command);&#xA;&#x9;while (wse.Status == 0) {&#xA;&#x9;&#x9;// see also https://msdn.microsoft.com/en-us/library/x83z1d9f(v=vs.84).aspx&#xA;&#x9;&#x9;// see also http://www.sparxsystems.com/forums/smf/index.php/topic,6063.msg127934.html&#xA;&#x9;&#x9;var message = 'Waiting for command &#34;' + command + '&#34; to finish.';&#xA;&#x9;&#x9;LOGInfo(message);&#xA;&#x9;&#x9;// alternative way of &#34;sleeping&#34;&#xA;&#x9;&#x9;WSH_SHELL.Popup(message, 1, &#34;Info message&#34;, PT_OK + PT_ICONINFORMATION);&#xA;&#x9;}&#xA;&#x9;if (!wse.StdOut.AtEndOfStream) {&#xA;&#x9;&#x9;LOGInfo(wse.StdOut.ReadAll());&#xA;&#x9;}&#xA;&#x9;if (!wse.StdErr.AtEndOfStream) {&#xA;&#x9;&#x9;LOGError(wse.StdErr.ReadAll());&#xA;&#x9;&#x9;commandFinishedSuccessfully = false;&#xA;&#x9;}&#xA;&#x9;return commandFinishedSuccessfully;&#xA;}&#xA;&#xA;/**&#xA; * @return {string} &#34;test - Enterprise Architect&#34; when the model is located in C:\Users\username\Documents\test.eapx&#xA; * @private&#xA; */&#xA;function getWindowTitleForInstanceOfEA() {&#xA;&#x9;var windowTitle = getFileNameWithoutExtensionForInstanceOfEA() + &#34; - Enterprise Architect&#34;;&#xA;&#x9;return windowTitle;&#xA;}&#xA;&#xA;/**&#xA; * @return {string} &#34;test&#34; when the full path is C:\Users\username\Documents\test.eapx&#xA; * @private&#xA; */&#xA;function getFileNameWithoutExtensionForInstanceOfEA() {&#xA;&#x9;var connectionString = Repository.ConnectionString;&#xA;&#x9;LOGInfo(connectionString);&#xA;&#x9;var fileName = connectionString.substring(connectionString.lastIndexOf(&#34;\\&#34;) + 1, connectionString.lastIndexOf(&#34;.&#34;));&#xA;&#x9;return fileName;&#xA;}&#xA;&#xA;/*&#xA; * Method does not work, but keep code here to document what has been tried.&#xA; */&#xA;// function determineProcessIdDoesNotWork(workingDirectory) {&#xA;&#x9;// var processId;&#xA;&#x9;// var locator = new COMObject(&#34;WbemScripting.SWbemLocator&#34;); // see https://docs.microsoft.com/en-us/windows/win32/wmisdk/swbemlocator&#xA;&#x9;// var service = locator.ConnectServer(&#34;.&#34;, &#34;\\root\\cimv2&#34;);&#xA;&#x9;// var query = &#34;SELECT * FROM Win32_Process WHERE Name = 'EA.exe'&#34;; // see https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-process&#xA;&#x9;// var processes = service.ExecQuery(query); // ExecQuery() returns an SWbemObjectSet, see https://docs.microsoft.com/en-us/windows/win32/wmisdk/swbemobjectset&#xA;&#x9;// Session.Output(&#34;count=&#34; + processes.Count);&#xA;&#x9;// /*&#xA;&#x9; // * And now how to iterate over processes? Far from trivial using JavaScript.&#xA;&#x9; // * See https://dentrassi.de/2011/02/04/access-to-wmi-in-java-using-eclipse-swt-ole-integration/&#xA;&#x9; // * and https://stackoverflow.com/questions/20386875/iterating-over-swbempropertyset-objects&#xA;&#x9; // * and https://theroadtodelphi.com/2010/12/01/accesing-the-wmi-from-pascal-code-delphi-oxygene-freepascal/&#xA;&#x9; // * for some inspiration (but no working solution found yet for Javascript).&#xA;&#x9; // * &#xA;&#x9; // * Tried the for/of loop, but &#34;processes is not iterable&#34;.&#xA;&#x9; // */&#xA;&#x9;// return processId;&#xA;// }"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{6EDAAE4E-3B45-4bc1-B4D6-2C1740B50233}"/>
         <Column name="ScriptAuthor" value="{BFB6AF55-0C36-4476-91A3-D8C13D7BAE82}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;_logging-utils&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="/**&#xA; * @file This file contains utility functions to assist with logging.&#xA; *&#xA; * You can change the log level at any time during execution by setting the LOGLEVEL variable&#xA; * in your script to the desired value. Valid values for LOGLEVEL are:&#xA; * - LOGLEVEL_ERROR&#xA; * - LOGLEVEL_WARNING&#xA; * - LOGLEVEL_INFO&#xA; * - LOGLEVEL_DEBUG&#xA; * - LOGLEVEL_TRACE&#xA; *&#xA; * This script is a JavaScript version of the original JScript-Logging from Sparx, and with more logical&#xA; * log levels (ERROR - WARNING - INFO - DEBUG - TRACE instead of ERROR - INFO - WARNING - DEBUG - TRACE).&#xA; * See also https://www.sparxsystems.com/forums/smf/index.php/topic,11082.msg149186.html.&#xA; */&#xA;&#xA;// LOGLEVEL values&#xA;var LOGLEVEL_ERROR = 0;&#xA;var LOGLEVEL_WARNING = 1;&#xA;var LOGLEVEL_INFO = 2;&#xA;var LOGLEVEL_DEBUG = 3;&#xA;var LOGLEVEL_TRACE = 4;&#xA;&#xA;// The level to log at; change if needed in your own script.&#xA;var LOGLEVEL = LOGLEVEL_INFO;&#xA;&#xA;/**&#xA; * Logs a message at the ERROR level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_ERROR or above.&#xA; *&#xA; * @param {string} message The message to log&#xA; */&#xA;function LOGError(message) {&#xA;&#x9;if (LOGLEVEL &gt;= LOGLEVEL_ERROR)&#xA;&#x9;&#x9;Session.Output(_LOGGetDisplayDate() + &#34; [ERROR]: &#34; + message);&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the INFO level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_INFO or above.&#xA; *&#xA; * @param {string} message The message to log&#xA; */&#xA;function LOGInfo(message) {&#xA;&#x9;if (LOGLEVEL &gt;= LOGLEVEL_INFO)&#xA;&#x9;&#x9;Session.Output(_LOGGetDisplayDate() + &#34; [INFO]: &#34; + message);&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the WARNING level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_WARNING or above.&#xA; *&#xA; * @param {string} message The message to log&#xA; */&#xA;function LOGWarning(message) {&#xA;&#x9;if (LOGLEVEL &gt;= LOGLEVEL_WARNING)&#xA;&#x9;&#x9;Session.Output(_LOGGetDisplayDate() + &#34; [WARNING]: &#34; + message);&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the DEBUG level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_DEBUG or above.&#xA; *&#xA; * @param {string} message The message to log&#xA; */&#xA;function LOGDebug(message) {&#xA;&#x9;if (LOGLEVEL &gt;= LOGLEVEL_DEBUG)&#xA;&#x9;&#x9;Session.Output(_LOGGetDisplayDate() + &#34; [DEBUG]: &#34; + message);&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the TRACE level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_TRACE or above.&#xA; *&#xA; * @param {string} message The message to log&#xA; */&#xA;function LOGTrace(message) {&#xA;&#x9;if (LOGLEVEL &gt;= LOGLEVEL_TRACE)&#xA;&#x9;&#x9;Session.Output(_LOGGetDisplayDate() + &#34; [TRACE]: &#34; + message);&#xA;}&#xA;&#xA;/**&#xA; * Returns the current date/time in a format suitable for logging.&#xA; *&#xA; * @return {string} The current date/time&#xA; * @private&#xA; */&#xA;function _LOGGetDisplayDate() {&#xA;&#x9;var now = new Date();&#xA;&#xA;&#x9;// Pad hour value&#xA;&#x9;var hours = now.getHours();&#xA;&#x9;if (hours &lt; 10)&#xA;&#x9;&#x9;hours = &#34;0&#34; + hours;&#xA;&#xA;&#x9;// Pad minute value&#xA;&#x9;var minutes = now.getMinutes();&#xA;&#x9;if (minutes &lt; 10)&#xA;&#x9;&#x9;minutes = &#34;0&#34; + minutes;&#xA;&#xA;&#x9;// Pad second value&#xA;&#x9;var seconds = now.getSeconds();&#xA;&#x9;if (seconds &lt; 10)&#xA;&#x9;&#x9;seconds = &#34;0&#34; + seconds;&#xA;&#xA;&#x9;var displayDate = now.getFullYear() + &#34;-&#34; + (now.getMonth() + 1) + &#34;-&#34; + now.getDate();&#xA;&#x9;displayDate += &#34; &#34; + hours + &#34;:&#34; + minutes + &#34;:&#34; + seconds;&#xA;&#xA;&#x9;return displayDate;&#xA;}"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{0F9E91B0-CB24-466f-97C1-398D10320DA6}"/>
         <Column name="ScriptAuthor" value="{FAD5FD80-AFAF-4797-8BFB-44A019438349}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;synchronize-profile&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="!INC eamt-fda-concept-models._fda-concept-model-constants&#xA;&#xA;/**&#xA; * Synchronizes the tagged values of the Concept and ConceptModel stereotypes of the FDA profile using the&#xA; * [`Repository.SynchProfile()` method](https://www.sparxsystems.com/search/sphider/search.php?query=synchprofile&amp;type=and&amp;category=User+Guide+Latest&amp;tab=5&amp;search=1).&#xA; *&#xA; * @summary Synchronizes the tagged values of the Concept and ConceptModel stereotypes of the FDA profile&#xA; */&#xA;function main() {&#xA;&#x9;Repository.SynchProfile(PROFILENAME, STEREOTYPE_CONCEPTMODEL);&#xA;&#x9;Repository.SynchProfile(PROFILENAME, STEREOTYPE_CONCEPT);&#xA;&#x9;Repository.RefreshModelView(0);&#xA;}&#xA;&#xA;main();"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{B99975E0-30D7-4a05-9528-FC67CE1785EA}"/>
         <Column name="ScriptAuthor" value="{FAD5FD80-AFAF-4797-8BFB-44A019438349}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;_fda-concept-model-constants&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="var PROFILENAME = &#34;FDAprofil&#34;;&#xA;var STEREOTYPE_CONCEPTMODEL = &#34;FDAprofil::ConceptModel&#34;;&#xA;var STEREOTYPE_CONCEPT = &#34;FDAprofil::Concept&#34;;&#xA;&#xA;var TAG_URI = &#34;URI&#34;;"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{C346DE00-4F08-4dc2-A972-9B0692521132}"/>
         <Column name="ScriptAuthor" value="{9B88FBBA-2AEE-4828-95E3-4066B9FF9E29}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;export-eamt-scripts&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="!INC eamt-utilities._logging-utils&#xA;!INC eamt-utilities._shell-application-utils&#xA;!INC eamt-utilities._command-line-utils&#xA;&#xA;var LOGLEVEL = LOGLEVEL_INFO;&#xA;&#xA;/**&#xA; * Exports the scripts in the EAMT scripts groups as&#xA; *&#xA; * 1. a EA reference data file for import in another EA instance &#xA; * 2. seperate script files&#xA; * 3. a separate README.md file, containing the documentation extracted from the scripts&#xA; * &#xA; * The scripts should be saved in folder `ea-modelling-tools-javascript/src`.&#xA; *&#xA; * @summary Exports the EAMT scripts&#xA; */&#xA;function main() {&#xA;&#x9;Repository.EnsureOutputVisible(&#34;Script&#34;);&#xA;&#x9;&#xA;&#x9;/*&#xA;&#x9; * A backslash must be escaped in Javascript, therefore two backslashes:&#xA;&#x9; * - one because the asterisk must be escaped with a backslash when calling a Java program from the command line&#xA;&#x9; * - one because the backslash to escape the asterisk must be escaped itself when the regex is constructed in a script&#xA;&#x9; */&#xA;&#x9;var scriptGroupNameOrRegex = &#34;eamt-\\*&#34;;&#xA;&#x9;&#xA;&#x9;var scriptFolderPath = chooseFolderWithUI(&#34;Folder in which the script files should be saved (ea-modelling-tools-javascript/src)&#34;);&#xA;&#x9;if (scriptFolderPath.length == 0) {&#xA;&#x9;&#x9;LOGError(&#34;No folder path given&#34;);&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;runBatFileInDefaultWorkingDirectory(&#34;export-scripts.bat&#34;, '-sg &#34;' + scriptGroupNameOrRegex + '&#34; -o ' + scriptFolderPath + &#34; -doc -p 5&#34;);&#xA;&#x9;&#xA;&#x9;openFolderInWindowsExplorer(scriptFolderPath);&#xA;}&#xA;&#xA;main();"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{E4D53B7B-8414-40b9-9DF0-426261C791F3}"/>
         <Column name="ScriptAuthor" value="{9B88FBBA-2AEE-4828-95E3-4066B9FF9E29}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;export-scripts&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="!INC eamt-utilities._logging-utils&#xA;!INC eamt-utilities._shell-application-utils&#xA;!INC eamt-utilities._command-line-utils&#xA;&#xA;var LOGLEVEL = LOGLEVEL_INFO;&#xA;&#xA;/**&#xA; * Exports the scripts in one or more scripts groups as&#xA; *&#xA; * 1. a EA reference data file for import in another EA instance &#xA; * 2. seperate script files&#xA; * 3. a separate README.md file, containing the documentation extracted from the scripts&#xA; *&#xA; * An asterisk (*) in a regex must be escaped with a backslash, see also Java class&#xA; * `dk.gov.data.modellingtools.app.ExportScripts`.&#xA; *&#xA; * So use `xyz\*` instead of `xyz*` to export all script groups that have a name starting with xyz.&#xA; *&#xA; * The name/regex is used in a LIKE expression in the database of the .eapx file.&#xA; * See [The LIKE operator in Microsoft Jet SQL](https://docs.microsoft.com/en-us/previous-versions/office/developer/office2000/aa140015(v=office.10)#the-like-operator)&#xA; * and below for the syntax.&#xA; *&#xA; *  - asterisk (`*`): matches any number of characters and can be used anywhere in the pattern string.&#xA; *  - question mark (`?`) matches any single character and can be used anywhere in the pattern string.&#xA; *  - number sign (`#`): matches any single digit and can be used anywhere in the pattern string.&#xA; *  - square brackets (`[]`): matches any single character within the list that is enclosed within brackets, and can be used anywhere in the pattern string.&#xA; *  - exclamation mark (`!`): matches any single character not in the list that is enclosed within the square brackets.&#xA; *  - hyphen (`-`): matches any one of a range of characters that is enclosed within the square brackets.&#xA; */&#xA;function main() {&#xA;&#x9;Repository.EnsureOutputVisible(&#34;Script&#34;);&#xA;&#x9;&#xA;&#x9;// a backslash must be escaped in Javascript, therefore two backslashes&#xA;&#x9;var scriptGroupNameOrRegex = Session.Input(&#34;Script group name or regex for a collection of scripts groups&#34;);&#xA;&#x9;if (scriptGroupNameOrRegex.length == 0) {&#xA;&#x9;&#x9;LOGError(&#34;No script group given&#34;);&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;var scriptFolderPath = chooseFolderWithUI(&#34;Folder in which the script files should be saved&#34;);&#xA;&#x9;if (scriptFolderPath.length == 0) {&#xA;&#x9;&#x9;LOGError(&#34;No folder path given&#34;);&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;runBatFileInDefaultWorkingDirectory(&#34;export-scripts.bat&#34;, '-sg &#34;' + scriptGroupNameOrRegex + '&#34; -o ' + scriptFolderPath + &#34; -p 5&#34;);&#xA;&#x9;&#xA;&#x9;openFolderInWindowsExplorer(scriptFolderPath);&#xA;}&#xA;&#xA;main();"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{6899B6FC-ED87-4371-A1D7-D1D9EB10798D}"/>
         <Column name="ScriptAuthor" value="{2D4D14C7-61B2-4792-8F5F-00705AFB7436}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;retrieve-process-id-of-running-ea-instance&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="!INC eamt-utilities._command-line-utils&#xA;&#xA;/**&#xA; * Retrieves the [Windows process id](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/finding-the-process-id) &#xA; * of the EA instance from which this script is invoked. That process id can be used as an argument to one of the applications&#xA; * in the EAMT Modelling Tools Java.&#xA; *&#xA; * @summary Retrieves the Windows process id of this EA instance.&#xA; */&#xA;function main() {&#xA;&#x9;Repository.EnsureOutputVisible(&#34;Script&#34;);&#xA;&#x9;Session.Output(determineProcessId());&#xA;}&#xA;&#xA;main();"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{BFFAE836-A1AC-411c-A687-C100853E32C6}"/>
         <Column name="ScriptAuthor" value="{6FA0E69C-7CFE-4201-965D-EACB6B9F1F6F}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;transliterate-names&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="!INC eamt-utilities._guid-utils&#xA;!INC eamt-utilities._logging-utils&#xA;!INC eamt-utilities._messages&#xA;!INC eamt-utilities._model-utils&#xA;!INC eamt-utilities._tagged-values-utils&#xA;&#xA;var TAG_NAME_TRANSLITERATED_NAME = &#34;transliteratedName&#34;;&#xA;&#xA;var LOGLEVEL = LOGLEVEL_INFO;&#xA;&#xA;&#xA;/**&#xA; * Transliterates the Danish characters and the letter e with acute to &#xA; * [Basic Latin](https://unicode-table.com/en/blocks/basic-latin/) characters&#xA; * for all model elements, and puts the transliterated name in tagged value&#xA; * `transliteratedName`. Enumeration literals are not transliterated, and if&#xA; * an enumeration literal has that tagged value, it is removed.&#xA; *&#xA; * - Ã¸ â†’ oe&#xA; * - Ã¦ â†’ ae&#xA; * - Ã¥ â†’ aa&#xA; * - Ã© â†’ e&#xA; *&#xA; * @summary Transliterates the names of the model elements.&#xA; */&#xA;function main() {&#xA;&#x9;// Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible(&#34;Script&#34;);&#xA;&#xA;&#x9;// Get the currently selected package in the tree to work on&#xA;&#x9;var aPackage as EA.Package;&#xA;&#x9;aPackage = Repository.GetTreeSelectedPackage();&#xA;&#xA;&#x9;LOGInfo(&#34;=======================================&#34;);&#xA;&#xA;&#x9;if (aPackage != null &amp;&amp; aPackage.ParentID != 0) {&#xA;&#x9;&#x9;LOGInfo(&#34;Working on package '&#34; + aPackage.Name + &#34;' (ID=&#34; + aPackage.PackageID + &#34;)&#34;);&#xA;&#xA;&#x9;&#x9;var elements as EA.Collection;&#xA;&#x9;&#x9;var currentElement as EA.Element;&#xA;&#x9;&#x9;var elements = getElementsOfPackageAndSubpackages(aPackage);&#xA;&#x9;&#x9;for (var i = 0; i &lt; elements.length; i++) {&#xA;&#x9;&#x9;&#x9;currentElement = elements[i];&#xA;&#x9;&#x9;&#x9;if (currentElement.Type == &#34;Class&#34; || currentElement.Type == &#34;DataType&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;transliterateNameAndUpdateTaggedValueElement(currentElement);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;var attributes as EA.Collection;&#xA;&#x9;&#x9;&#x9;&#x9;attributes = currentElement.Attributes;&#xA;&#x9;&#x9;&#x9;&#x9;for (var j = 0; j &lt; attributes.Count; j++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var currentAttribute as EA.Attribute;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentAttribute = attributes.GetAt(j);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;transliterateNameAndUpdateTaggedValueAttribute(currentAttribute);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;var connectors as EA.Collection;&#xA;&#x9;&#x9;&#x9;&#x9;connectors = currentElement.Connectors;&#xA;&#x9;&#x9;&#x9;&#x9;for (var j = 0; j &lt; connectors.Count; j++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var currentConnector as EA.Connector;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentConnector = connectors.GetAt(j);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var proceed = isConnectorAssociationAndControlledInSamePackageAsElement(currentConnector, currentElement);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (proceed) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transliterateNameAndUpdateTaggedValueConnectorEnd(currentConnector, true);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transliterateNameAndUpdateTaggedValueConnectorEnd(currentConnector, false);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;} else if (currentElement.Type == &#34;Enumeration&#34;) {&#xA;&#x9;&#x9;&#x9;&#x9;transliterateNameAndUpdateTaggedValueElement(currentElement);&#xA;&#x9;&#x9;&#x9;&#x9;/*&#xA;&#x9;&#x9;&#x9;&#x9; * next lines of code: update models that actually contain transliterated names for enumeration values, from earlier modelling&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;var attributes as EA.Collection;&#xA;&#x9;&#x9;&#x9;&#x9;attributes = currentElement.Attributes;&#xA;&#x9;&#x9;&#x9;&#x9;for (var j = 0; j &lt; attributes.Count; j++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;removeTaggedValueIfPresent(attributes.GetAt(j));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;LOGInfo(&#34;Done!&#34;);&#xA;&#x9;} else {&#xA;&#x9;&#x9;LOGError(MESSAGE_PACKAGE_REQUIRED);&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param element {EA.Element}&#xA; */&#xA;function transliterateNameAndUpdateTaggedValueElement(element) {&#xA;&#x9;LOGDebug(&#34;Element: &#34; + element.Name);&#xA;&#x9;if (mustBeTransliterated(element.Name)) {&#xA;&#x9;&#x9;var transliteratedName = transliterate(element.Name);&#xA;&#x9;&#x9;setTaggedValueElement(element, TAG_NAME_TRANSLITERATED_NAME, transliteratedName);&#xA;&#x9;&#x9;LOGInfo(&#34;Transliterated name: &#34; + transliteratedName + &#34; of element &#34; + element.Name);&#xA;&#x9;} else {&#xA;&#x9;&#x9;removeTaggedValueIfPresent(element);&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param element {EA.Attribute}&#xA; */&#xA;function transliterateNameAndUpdateTaggedValueAttribute(attribute) {&#xA;&#x9;LOGDebug(&#34;Attribute: &#34; + attribute.Name);&#xA;&#x9;if (mustBeTransliterated(attribute.Name)) {&#xA;&#x9;&#x9;var transliteratedName = transliterate(attribute.Name);&#xA;&#x9;&#x9;setTaggedValueAttribute(attribute, TAG_NAME_TRANSLITERATED_NAME, transliteratedName);&#xA;&#x9;&#x9;LOGInfo(&#34;Transliterated name: &#34; + transliteratedName + &#34; of attribute &#34; + attribute.Name);&#xA;&#x9;} else {&#xA;&#x9;&#x9;removeTaggedValueIfPresent(attribute);&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param connector {EA.Connector}&#xA; * @param source {boolean}&#xA; */&#xA;function transliterateNameAndUpdateTaggedValueConnectorEnd(connector, source) {&#xA;&#x9;var roleName = null;&#xA;&#x9;if (source) {&#xA;&#x9;&#x9;roleName = connector.ClientEnd.Role;&#xA;&#x9;} else {&#xA;&#x9;&#x9;roleName = connector.SupplierEnd.Role;&#xA;&#x9;}&#xA;&#x9;LOGDebug(&#34;Connector end role: &#34; + roleName);&#xA;&#x9;if (mustBeTransliterated(roleName)) {&#xA;&#x9;&#x9;var transliteratedName = transliterate(roleName);&#xA;&#x9;&#x9;setTaggedValueConnectorEnd(connector, TAG_NAME_TRANSLITERATED_NAME, transliteratedName, source);&#xA;&#x9;&#x9;LOGInfo(&#34;Transliterated name: &#34; + transliteratedName + &#34; of connector end &#34; + roleName);&#xA;&#x9;} else {&#xA;&#x9;&#x9;removeTaggedValueConnectorEndIfPresent(connector, source);&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * @param name {string}&#xA; * @return boolean&#xA; */&#xA;function mustBeTransliterated(name) {&#xA;&#x9;return name.search(/Ã¦|Ã¸|Ã¥|Ã©/i) != -1;&#xA;}&#xA;&#xA;/**&#xA; * @param name {string}&#xA; * @return {string}&#xA; */&#xA;function transliterate(name) {&#xA;&#x9;return name.replace(/Ã¦/g, &#34;ae&#34;).replace(/Ã†/g, &#34;Ae&#34;).replace(/Ã¸/g, &#34;oe&#34;).replace(/Ã˜/g, &#34;Oe&#34;).replace(/Ã¥/g, &#34;aa&#34;).replace(/Ã…/g, &#34;Aa&#34;).replace(/Ã©/g, &#34;e&#34;).replace(/Ã‰/g, &#34;E&#34;);&#xA;}&#xA;&#xA;/**&#xA; * @param object {EA.Element or EA.Attribute}&#xA; */&#xA;function removeTaggedValueIfPresent(object) {&#xA;&#x9;for (var i = 0; i &lt; object.TaggedValues.Count; i++) {&#xA;&#x9;&#x9;var tag = object.TaggedValues.GetAt(i);&#xA;&#x9;&#x9;if (tag.Name == TAG_NAME_TRANSLITERATED_NAME) {&#xA;&#x9;&#x9;&#x9;object.TaggedValues.DeleteAt(i, true);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;object.TaggedValues.Refresh();&#xA;}&#xA;&#xA;/**&#xA; * @param connector {EA.Connector}&#xA; * @param source {boolean}&#xA; */&#xA;function removeTaggedValueConnectorEndIfPresent(connector, source /* boolean, false =&gt; target */ ) {&#xA;&#x9;var taggedValues as EA.Collection;&#xA;&#x9;if (source) {&#xA;&#x9;&#x9;taggedValues = connector.ClientEnd.TaggedValues;&#xA;&#x9;} else {&#xA;&#x9;&#x9;taggedValues = connector.SupplierEnd.TaggedValues;&#xA;&#x9;}&#xA;&#x9;for (var i = 0; i &lt; taggedValues.Count; i++) {&#xA;&#x9;&#x9;var tag = taggedValues.GetAt(i);&#xA;&#x9;&#x9;if (tag.Tag == TAG_NAME_TRANSLITERATED_NAME) {&#xA;&#x9;&#x9;&#x9;taggedValues.DeleteAt(i, true);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;taggedValues.Refresh();&#xA;}&#xA;&#xA;main();"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{2B5AA69A-C64A-4d2b-8B33-899B9CDD6C0C}"/>
         <Column name="ScriptAuthor" value="{FC483AD9-C76F-46b2-9883-E7D1D8C4B8EB}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;export-data-model-vocabulary-da&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="!INC eamt-utilities._logging-utils&#xA;!INC eamt-utilities._command-line-utils&#xA;!INC eamt-utilities._messages&#xA;!INC eamt-utilities._shell-application-utils&#xA;!INC eamt-utilities._constants&#xA;&#xA;/**&#xA; * Exports a data model to a Danish data vocabulary in the CSV format.&#xA; * The package containing the concept model must be selected in the Project Browser.&#xA; * If a URL is available for the dataset that is described by the data model, it can be provided and will be added to the data model.&#xA; * &#xA; * This script uses template vocabulary_csv.ftl in %EAMT_HOME%/config/templates.&#xA; *&#xA; * @summary Exports a data model to a data vocabulary.&#xA; */&#xA;function main() {&#xA;&#x9;Repository.EnsureOutputVisible(&#34;Script&#34;);&#xA;&#x9;&#xA;&#x9;// Get the currently selected package in the tree to work on&#xA;&#x9;var package as EA.Package;&#xA;&#x9;package = Repository.GetTreeSelectedPackage();&#xA;&#x9;if (package != null &amp;&amp; package.ParentID != 0) {&#xA;&#x9;&#xA;&#x9;&#x9;var outputFolder = chooseFolderWithUI(&#34;Folder in which the exported data vocabulary should be saved&#34;);&#xA;&#x9;&#x9;if (outputFolder.length == 0) {&#xA;&#x9;&#x9;&#x9;LOGError(&#34;No folder path given&#34;);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var answer = Session.Prompt(&#34;Should the output file have a header?&#34;, promptYESNO);&#xA;&#x9;&#x9;var hasHeader;&#xA;&#x9;&#x9;if (answer == resultYes) {&#xA;&#x9;&#x9;&#x9;hasHeader = true;&#xA;&#x9;&#x9;} else if (answer == resultNo) {&#xA;&#x9;&#x9;&#x9;hasHeader = false;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var answer = Session.Prompt(&#34;Is a link to metadata available for the data?&#34;, promptYESNO);&#xA;&#x9;&#x9;var hasMetadata;&#xA;&#x9;&#x9;var metadataUrl;&#xA;&#x9;&#x9;if (answer == resultYes) {&#xA;&#x9;&#x9;&#x9;hasMetadata = true;&#xA;&#x9;&#x9;&#x9;metadataUrl = Session.Input(&#34;Metadata URL: &#34;);&#xA;&#x9;&#x9;&#x9;if (metadataUrl.length == 0) {&#xA;&#x9;&#x9;&#x9;&#x9;LOGInfo(&#34;No metadata URL given&#34;);&#xA;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else if (answer == resultNo) {&#xA;&#x9;&#x9;&#x9;hasMetadata = false;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;LOGError(&#34;Unexpected answer&#34;);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// cvs format; in Danish&#xA;&#x9;&#x9;var options = &#34;-o &#34; + outputFolder + &#34; -pkg &#34; + package.PackageGUID + &#34; -t csv -l da -p 10 &#34;;&#xA;&#x9;&#x9;if (hasHeader) {&#xA;&#x9;&#x9;&#x9;options = options + &#34; -h &#34;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (hasMetadata) {&#xA;&#x9;&#x9;&#x9;options = options + &#34; -m &#34; + metadataUrl;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;runBatFileInDefaultWorkingDirectory(&#34;export-data-model-vocabulary.bat&#34;, options);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;openFolderInWindowsExplorer(outputFolder);&#xA;&#x9;} else {&#xA;&#x9;&#x9;LOGError(MESSAGE_PACKAGE_REQUIRED);&#xA;&#x9;}&#xA;}&#xA;&#xA;main();"/>
      </DataRow>
      <DataRow>
         <Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
         <Column name="ScriptName" value="{5E129121-7FAF-4a79-A34E-C3BB045C7BA5}"/>
         <Column name="ScriptAuthor" value="{BF522BAE-AD19-4abb-8EA7-B7A030C7F6EA}"/>
         <Column name="Notes"
                 value="&lt;Script Name=&#34;export-concept-model&#34; Type=&#34;Internal&#34; Language=&#34;JavaScript&#34;/&gt;&#xA;"/>
         <Column name="Script"
                 value="!INC eamt-utilities._logging-utils&#xA;!INC eamt-utilities._command-line-utils&#xA;!INC eamt-utilities._messages&#xA;!INC eamt-utilities._shell-application-utils&#xA;&#xA;/**&#xA; * Exports a concept model to a specific format. The package containing the concept model must be selected in the Project Browser.&#xA; *&#xA; * This script uses templates concept_model_rdf.ftlx and concept_model_asciidoc.ftl in %EAMT_HOME%/config/templates.&#xA; *&#xA; * @summary Exports a concept model.&#xA; */&#xA;function main() {&#xA;&#x9;Repository.EnsureOutputVisible(&#34;Script&#34;);&#xA;&#x9;&#xA;&#x9;// Get the currently selected package in the tree to work on&#xA;&#x9;var package as EA.Package;&#xA;&#x9;package = Repository.GetTreeSelectedPackage();&#xA;&#x9;if (package != null &amp;&amp; package.ParentID != 0) {&#xA;&#x9;&#xA;&#x9;&#x9;var outputFolder = chooseFolderWithUI(&#34;Folder in which the exported concept model should be saved&#34;);&#xA;&#x9;&#x9;if (outputFolder.length == 0) {&#xA;&#x9;&#x9;&#x9;LOGError(&#34;No folder path given&#34;);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;outputFormat = Session.Input(&#34;Output format: &#34;);&#xA;&#x9;&#x9;if (outputFormat.length == 0) {&#xA;&#x9;&#x9;&#x9;LOGError(&#34;No output format given&#34;);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;runBatFileInDefaultWorkingDirectory(&#34;export-concept-model.bat&#34;, &#34;-o &#34; + outputFolder + &#34; -pkg &#34; + package.PackageGUID + &#34; -t &#34; + outputFormat + &#34; -p 10&#34;);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;openFolderInWindowsExplorer(outputFolder);&#xA;&#x9;} else {&#xA;&#x9;&#x9;LOGError(MESSAGE_PACKAGE_REQUIRED);&#xA;&#x9;}&#xA;}&#xA;&#xA;main();"/>
      </DataRow>
   </DataSet>
</RefData>
